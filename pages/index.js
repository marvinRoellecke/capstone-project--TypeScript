import styled from "styled-components";
import Head from "next/head";
import Header from "../components/Header/Header";
import Main from "../components/Main/Main";
import Footer from "../components/Footer/Footer";
import FilterMenu from "../components/FilterMenu/FilterMenu";
import { useState } from "react";

export default function Home({
  locations,
  onToggleFavorite,
  favorites,
  setLocations,
}) {
  const [filterData, setFilterData] = useState({
    sport: {
      basketball: false,
      fitness: false,
      boule: false,
      football: false,
      tennis: false,
      volleyball: false,
      skateboard: false,
      tischtennis: false,
    },
  });
  const [cityFilter, setCityFilter] = useState();

  //show / hide Filter Menu
  const [isShowingFilterMenu, setIsShowingFilterMenu] = useState(false);

  function handleShowFilterMenu() {
    setIsShowingFilterMenu(!isShowingFilterMenu);
  }

  //const params = new URL("http://localhost:3000/api/locations/?");
  const [params, setParams] = useState(
    new URL("http://localhost:3000/api/locations/?")
  );

  async function searchApi(params) {
    const searchURL = params.searchParams.toString();
    console.log(searchURL);
    try {
      const response = await fetch("/api/locations/?" + searchURL);
      const data = await response.json();
      setLocations(data);
    } catch (error) {
      console.error(error);
    }
  }

  //filter function
  async function handleFilter(event, category) {
    setFilterData((prevState) => {
      const newFilterData = {
        ...filterData,
        [category]: {
          ...filterData[category],
          [event.target.value]: event.target.checked,
        },
      };

      params.searchParams.delete(category); //only needed because on city text input

      Object.entries(newFilterData).map((filterCategory) =>
        Object.entries(filterCategory[1])
          .filter((entry) => {
            return entry[1];
          })
          .map((entry) => {
            return params.searchParams.append(filterCategory[0], entry[0]);
          })
      );

      searchApi(params);

      return newFilterData;
    });
  }

  function handleCityFilter(event) {
    if (event.target.value !== "") {
      setCityFilter(event.target.value);
      params.searchParams.delete(event.target.name);
      params.searchParams.append(event.target.name, event.target.value);
      searchApi(params);
    } else {
      setCityFilter("");
      params.searchParams.delete(event.target.name);
      searchApi(params);
    }
  }

  //sort function
  function handleChangeSort(event) {
    if (event === "az") {
      setLocations(
        [...locations].sort((a, b) => {
          const nameA = a.title.toLowerCase();
          const nameB = b.title.toLowerCase();
          if (nameA < nameB) {
            return -1;
          }
          if (nameA > nameB) {
            return 1;
          }
          return 0;
        })
      );
    } else if (event === "za") {
      setLocations(
        [...locations].sort((a, b) => {
          const nameA = a.title.toLowerCase();
          const nameB = b.title.toLowerCase();
          if (nameA < nameB) {
            return 1;
          }
          if (nameA > nameB) {
            return -1;
          }
          return 0;
        })
      );
    }
  }

  return (
    <>
      <Head>
        <title>localSports</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StyledMobileLayout>
        <Header onShowFilterMenu={handleShowFilterMenu} filterMenu />
        <Main
          locations={locations}
          filterData={filterData}
          onToggleFavorite={onToggleFavorite}
          favorites={favorites}
        />
        {isShowingFilterMenu && (
          <FilterMenu
            onShowFilterMenu={handleShowFilterMenu}
            onChangeSort={handleChangeSort}
            onFilter={handleFilter}
            onCityFilter={handleCityFilter}
            filterData={filterData}
            cityFilter={cityFilter}
          />
        )}
        <Footer atHomePage />
      </StyledMobileLayout>
    </>
  );
}

const StyledMobileLayout = styled.div`
  display: grid;
  grid-template-rows: 4rem auto 4rem;
  height: 100vh;

  main {
    overflow-y: scroll;
  }
`;
